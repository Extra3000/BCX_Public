
exports = async function(changeEvent) {
  const mongodb = context.services.get("mongodb-atlas");
  const device = await mongodb
      .db("Building")
      .collection("Building_1")
      .findOne({Name: 'Shutter_1'});
      
  const fetch = require('node-fetch');
  const URLON = 'https://home-gw.azurewebsites.net/api/plugOn?code=SUqpDRe6YxwJR6W6HlBd8eO9Aehy5dTspQbMFOOxPsDWAzFu6mTMiA==';
  const URLOFF = 'https://home-gw.azurewebsites.net/api/plugOff?code=TFgfkCw18lJV1DRGZFENktjXFDRqQcp7ik26iYVdChXNAzFu09yksw==';
  const string1 = "ON"
  const updateDescription = changeEvent.updateDescription;
    
  //console.log(JSON.stringify(device));
  //console.log(JSON.stringify(device).Current_State)

  //console.log(string2);
  if (updateDescription) {
      const updatedFields = updateDescription.updatedFields; // A document containing updated fields
    }
    
console.log(device['Current_State']);
string2 = device['Current_State'];
  //var obj = JSON.parse(device);
  if(string1 === string2){
      fetch(URLON);
        console.log('ON switched');

  }else{
      fetch(URLOFF);
      console.log('OFF switched');


  }
  
  return 0;
  
  /*
    A Database Trigger will always call a function with a changeEvent.
    Documentation on ChangeEvents: https://docs.mongodb.com/manual/reference/change-events/

    Access the _id of the changed document:
    const docId = changeEvent.documentKey._id;

    Access the latest version of the changed document
    (with Full Document enabled for Insert, Update, and Replace operations):
    const fullDocument = changeEvent.fullDocument;

    const updateDescription = changeEvent.updateDescription;

    See which fields were changed (if any):
    if (updateDescription) {
      const updatedFields = updateDescription.updatedFields; // A document containing updated fields
    }

    See which fields were removed (if any):
    if (updateDescription) {
      const removedFields = updateDescription.removedFields; // An array of removed fields
    }

    Functions run by Triggers are run as System users and have full access to Services, Functions, and MongoDB Data.

    Access a mongodb service:
    const collection = context.services.get("mongodb-atlas").db("Building").collection("Building_1");
    const doc = collection.findOne({ name: "mongodb" });

    Note: In Atlas Triggers, the service name is defaulted to the cluster name.

    Call other named functions if they are defined in your application:
    const result = context.functions.execute("function_name", arg1, arg2);

    Access the default http client and execute a GET request:
    const response = context.http.get({ url: <URL> })

    Learn more about http client here: https://www.mongodb.com/docs/atlas/app-services/functions/context/#context-http
  */
};
